<?xml version="1.0" encoding="UTF-8" ?>

<Module>
  <ModulePrefs title="Time Tracker" author="Reed Wilson">
    <Require feature="google.calendar-0.5.read"/>
  </ModulePrefs>
  <Content type="html">
    <![CDATA[
      <html>
        <style>
          th, td {
            padding-right: 5px;
          }

          table {
            width: 100%;
            font-size: smaller;
          }

          .nums {
            text-align: right;
          }

          .danger {
            color: red;
          }
        </style>
        <script type="text/javascript">

          // finds the hours for a given event
          var getTime = function(start, end) {
            return (end - start) / 1000 / 60 / 60;
          };

          // parses the tag and time out of the details
          var parseTag = function(details) {
            var re = /tags:\s*(\S+)/i;
            var arr = re.exec(details);
            if (arr)
              return arr[1];
            else
              return 'untagged';
          };

          // totals the tags
          var getTotal = function(tags) {
            var total = 0;
            for (tag in tags) {
              total += tags[tag]
            }
            return total;
          };

          // turns the dictionary into a list of sorted objects
          var getTagsList = function(t) {
            var tags = [];
            for (tag in t) {
              tags.push({
                tag: tag,
                count: t[tag]
              });
            }
            tags.sort(function(first, second) {
              return second.count - first.count
            });
            return tags;
          };

          // builds the html table that will display the data
          var buildTable = function(t, total) {
            var tags = getTagsList(t);
            var output = '<table><tbody>';
            output += '<tr><th>Tag</th><th>Hours</th><th>%</th></tr>';
            for (tag in tags) {
              if (tags[tag].tag == 'untagged') {
                output += '<tr class="danger">';
              }
              else {
                output += '<tr>';
              }
              output += '<td>' + tags[tag].tag + '</td><td class="nums">' + tags[tag].count  + '</td><td class="nums">' + Math.floor((tags[tag].count / total) * 100) + '</td></tr>';
            }
            output += '</tbody></table>';
            return output;
          };

          // converts a Google date to a JS date
          var convertDate = function(date) {
            return new Date(date.year, date.month, date.date, date.hour, date.minute, date.second);
          };

          // does the work of counting hours
          function eventCallback(cals) {
            // get a collection of tags and the time associated with the tags
            // { name0: float, name1: float }

            var tags = {};
            for (cal in cals) {
              var events = cals[cal].events;
              for (event in events) {
                if (!events[event].allDay) {
                  var tag = parseTag(events[event].details);
                  var time = getTime(convertDate(events[event].startTime), convertDate(events[event].endTime));
                  if (!(tag in tags)) {
                    tags[tag] = time;
                  } else {
                    tags[tag] += time;
                  }
                }
              }
            }

            output = buildTable(tags, getTotal(tags));
            document.getElementById('content_div').innerHTML = output;
          };

          // do stuff when the gadget loads
          gadgets.util.registerOnLoadHandler(function() {

            // get the events
            function doWork() {
              dates && google.calendar.read.getEvents(eventCallback, 'selected', dates.startTime, dates.endTime, {
                'requestedFields': ['details']
              });
            }

            // get the currently viewable dates
            var date;
            google.calendar.subscribeToDates(function(d) {
              dates = d;
              dates.endTime.date++;
              doWork()
            });
            google.calendar.subscribeToDataChange(doWork)
          });

        </script>

        <div id="content_div"></div>
      </html>
    ]]>
  </Content>
</Module>
